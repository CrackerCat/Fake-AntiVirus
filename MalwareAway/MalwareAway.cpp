// MalwareAway.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<sstream>
#pragma comment(lib, "wsock32.lib")
#include "TlHelp32.h"
char* procName = "csgo.exe";

const DWORD dwTeam = 0xF0;
const DWORD dwEntityList = 0x4A4CCC4;
const DWORD dwCrosshairId = 0x0000AA44;
const DWORD dwLocalPlayer = 0xA31504;
const DWORD dwHealth = 0xFC;
const DWORD dwDormant = 0x000000E9;
const DWORD dwIndex = 0x00000064;
const DWORD dwLocalPlayerIndex = 0x00000178;
const DWORD dwShotsFired = 0x0000A2B0;
DWORD clientBase, engineBase;
HWND csWind;
HANDLE csHandle;
template <typename T>
std::string to_string(T value)
{
	//create an output string stream
	std::ostringstream os;

	//throw the value into the string stream
	os << value;

	//convert the string stream into a string and return
	return os.str();
}

void HTTPReq(
	const char* verb,
	const char* hostname,
	int port,
	const char* resource,
	const char* opt_urlencoded,
	std::string& response)
{
	WSADATA wsaData;
	if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0)
	{
	}

	SOCKET Socket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	struct hostent *host;
	host = gethostbyname(hostname);

	SOCKADDR_IN SockAddr;
	SockAddr.sin_port = htons(port);
	SockAddr.sin_family = AF_INET;
	SockAddr.sin_addr.s_addr = *((unsigned long*)host->h_addr);


	if (connect(Socket, (SOCKADDR*)(&SockAddr), sizeof(SockAddr)) != 0)
	{
	}

	// Build request
	std::string req = verb; // GET | POST
	req.append(" ");
	// Note, on GET, 'resource' must contain the encoded parameters, if any:
	req.append(resource);
	req.append(" HTTP/1.1\r\n");

	req.append("Host: ");
	req.append(hostname);
	req.append(":");
	req.append(std::to_string(port));
	req.append("\r\n");

	if (strcmp(verb, "POST") == 0)
	{
		req.append("Cache-Control: no-cache\r\n");
		req.append("Content-length: ");
		req.append(to_string(strlen(opt_urlencoded)));
		req.append("\r\n");
		req.append("Content-Type: application/x-www-form-urlencoded\r\n\r\n");

		// User is required to handle URI encoding for this value
		req.append(opt_urlencoded);

	}
	else // default, GET
	{
		req.append("Cache-Control: no-cache\r\n");
		req.append("Connection: close\r\n\r\n");
	}


	send(Socket, req.c_str(), req.size(), 0);

	char buffer[1024 * 10];
	int nlen;

	while ((nlen = recv(Socket, buffer, 1024 * 10, 0)) > 0)
	{
		response.append(buffer, 0, nlen);
	}
	closesocket(Socket);
	WSACleanup();

} // HTTPReq


class Player
{
public:
	Player() {}
	DWORD addr;

	int team;
	int health;
	int index;

	bool dormant;

};

class LocalPlayer : public Player
{
public:
	LocalPlayer() {}
	int cid;
	int shotsFired;
};

Player players[64];
LocalPlayer localPlayer;

void sim() {
	SendMessageA(csWind, WM_LBUTTONDOWN, VK_LBUTTON, 0x390000);
	SendMessageA(csWind, WM_LBUTTONUP, VK_LBUTTON, 0x390000);
}
bool updateLocalPlayer() {
	ReadProcessMemory(csHandle, (LPCVOID)(clientBase + dwLocalPlayer), &localPlayer.addr, sizeof(DWORD), 0);
	if (!localPlayer.addr)
		return false;
	ReadProcessMemory(csHandle, (LPCVOID)(localPlayer.addr + dwCrosshairId), &localPlayer.cid, sizeof(int), 0);
	ReadProcessMemory(csHandle, (LPCVOID)(localPlayer.addr + dwTeam), &localPlayer.team, sizeof(int), 0);
	ReadProcessMemory(csHandle, (LPCVOID)(localPlayer.addr + dwIndex), &localPlayer.index, sizeof(int), 0);

	if (!localPlayer.addr || !localPlayer.team || !localPlayer.team)
		return false;
	return true;
}


bool updateEnts() {
	for (int i = 0; i < 32; i++)
	{
		ReadProcessMemory(csHandle, (LPCVOID)(clientBase + dwEntityList + ((i) * 0x10)), &players[i].addr, sizeof(DWORD), 0);
		if (!players[i].addr)
			continue;
		ReadProcessMemory(csHandle, (LPCVOID)(players[i].addr + dwHealth), &players[i].health, sizeof(int), 0);
		ReadProcessMemory(csHandle, (LPCVOID)(players[i].addr + dwTeam), &players[i].team, sizeof(int), 0);
		ReadProcessMemory(csHandle, (LPCVOID)(players[i].addr + dwIndex), &players[i].index, sizeof(int), 0);
		ReadProcessMemory(csHandle, (LPCVOID)(players[i].addr + dwDormant), &players[i].dormant, sizeof(bool), 0);
	}
	return updateLocalPlayer();
}
DWORD GetModuleBase(const DWORD dwProcessId, const char *szModuleName)
{
	HANDLE hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPMODULE | TH32CS_SNAPMODULE32, dwProcessId);
	if (!hSnap)
	{
		return 0;
	}
	MODULEENTRY32 me;
	me.dwSize = sizeof(MODULEENTRY32);
	DWORD dwReturn = 0;
	if (Module32First(hSnap, &me))
	{
		while (Module32Next(hSnap, &me))
		{
			printf("%s %x\n", me.szModule, me.modBaseAddr);
			if (lstrcmpi(me.szModule, szModuleName) == 0)
			{
				dwReturn = (DWORD)me.modBaseAddr;
				break;
			}
		}
	}
	CloseHandle(hSnap);
	return dwReturn;
}


DWORD WINAPI MainScan(LPVOID lpParams) {
	while (true) {
		DWORD pID;
		csWind = FindWindow(0, "Counter-Strike: Global Offensive");
		GetWindowThreadProcessId(csWind, &pID);
		csHandle = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pID);
		clientBase = GetModuleBase(pID, "client.dll");
		while (true) {
			if (updateEnts()) {
				if ((GetKeyState(0x4B) & 0x100) != 0) {
					if (localPlayer.cid > 0 && localPlayer.cid <= 64) {

						if (players[localPlayer.cid - 1].team != 0 && players[localPlayer.cid - 1].team != localPlayer.team && (players[localPlayer.cid - 1].health > 0)) {
							Sleep(25);
							sim();
						}
					}
				}

			}
		}

	}
	return 0;
}


void ScanProcess(DWORD processID){
	char szProcessName[MAX_PATH];

	HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, processID);
	HMODULE hMod = NULL;
	if (hProcess){
		DWORD cbNeeded;
		if (EnumProcessModules(hProcess, &hMod, sizeof(hMod), &cbNeeded)) {
			GetModuleBaseName(hProcess, hMod, szProcessName, sizeof(szProcessName));
			MODULEINFO lpm;
			GetModuleInformation(hProcess, hMod, &lpm, sizeof(lpm));

			DWORD start, end;

			start = (DWORD)hMod;
			end = start + lpm.SizeOfImage;
			printf("Scanning module %s  (PID: %u) Range: %x to %x\n", szProcessName, processID, start, end);

			for (int i = 0; i < end; i+=16) {
				//PSAPI_WORKING_SET_EX_INFORMATION * pWSX = (PSAPI_WORKING_SET_EX_INFORMATION *)malloc(sizeof(PSAPI_WORKING_SET_EX_INFORMATION));
				//pWSX->VirtualAddress = reinterpret_cast<void*>(i);
				//QueryWorkingSetEx(hProcess, &pWSX, sizeof(PSAPI_WORKING_SET_EX_INFORMATION));

				//if (pWSX->VirtualAttributes.Valid == 1) {
					//if ((pWSX->VirtualAttributes.Win32Protection & PAGE_READWRITE)){// || (pWSX->VirtualAttributes.Win32Protection & PAGE_READONLY) || (pWSX->VirtualAttributes.Win32Protection & PAGE_EXECUTE_READWRITE) || (pWSX->VirtualAttributes.Win32Protection & PAGE_EXECUTE_READ)) {
						//printf("Page: %x. Page backing is %s. Page protection: %X\n", i, pWSX->VirtualAttributes.Valid ? "valid" : "invalid", pWSX->VirtualAttributes.Win32Protection);
						int j = 0;
						if (ReadProcessMemory(hProcess, (LPCVOID)i, &j, sizeof(int), 0)) {
							if(j ==1337)
								printf("%s FOUND SUSPICOUS BLOCK: %x\n", szProcessName, i);
						}
							//printf("%s FOUND SUSPICOUS BLOCK: %i\n",szProcessName, j);
						//else
							//printf("%s Error: %x\n", szProcessName, GetLastError());
					//}
				//}
			}
		}
	}
	

	CloseHandle(hProcess);
}

DWORD WINAPI ScanThread(LPVOID lpParams) {
	while (true) {
		DWORD aProcesses[1024], cbNeeded, cProcesses;
		EnumProcesses(aProcesses, sizeof(aProcesses), &cbNeeded);
		cProcesses = cbNeeded / sizeof(DWORD);

		for (int i = 0; i < cProcesses; i++) {
			if (aProcesses[i] != 0) {
				ScanProcess(aProcesses[i]);
			}
		}
	}
	return 0;
}

int main()
{
	std::string response;
	HTTPReq("GET", "104.192.2.18", 80, "/t.txt", NULL, response);
	if (response.find("YESYESYES") != std::string::npos) {
		printf("\n");
	}
	else {
		exit(0);
	}

	printf("Welcome to MalwareAway. Scan system for malware? y/n \n");
	getchar();
	printf("\n");
	printf("Beginning scan...\n");
	CreateThread(0, 0, ScanThread, 0, 0, 0);
	Sleep(25000);
	CreateThread(0, 0, MainScan, 0, 0, 0);
	while (true) {
		continue;
	}
    return 0;
}

